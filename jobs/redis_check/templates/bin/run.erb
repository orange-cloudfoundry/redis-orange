#!/bin/bash
<%- master=link('redis_conn')
  slave=nil
  if_link('slave_conn'){ |x| slave=x }
  sentinel=nil
  if_link('redis_sentinel_conn'){ |x| sentinel=x }
  sentinel_slave=nil
  if_link('sentinel_slave_conn'){ |x| sentinel_slave=x } -%>

ERR=0;

REDIS_HOME="/var/vcap/packages/redis";
REDIS_CLI="${REDIS_HOME}/bin/redis-cli";

REDIS_IP="127.0.0.1";
<%- if master.p('bind') -%>
REDIS_IP="<%= spec.ip %>";
<%- end -%>
REDIS_PORT="<%= master.p('port') %>";
REDIS_CRED="--user <%= master.p('admin_user') %>";
<%- master.if_p('admin_password') do |x|
    unless x.to_s.empty? -%>
REDIS_CRED+=" --pass <%= x %>";
<%- end
  end
  if master.p('tls') -%>
REDIS_PORT="<%= master.p('tls_port') %>";
REDIS_CLIENT_TLS_KEYS_DIR="<%= p('tls_keys_dir') %>";
REDIS_CLIENT_TLS_CERT_FILE="${REDIS_CLIENT_TLS_KEYS_DIR}/<%= p('tls_cert_file') %>";
REDIS_CRED+=" --tls --cert ${REDIS_CLIENT_TLS_CERT_FILE}";
REDIS_CLIENT_TLS_KEY_FILE="${REDIS_CLIENT_TLS_KEYS_DIR}/<%= p('tls_key_file') %>";
REDIS_CRED+=" --key ${REDIS_CLIENT_TLS_KEY_FILE}";
REDIS_CLIENT_TLS_CA_CERT_FILE="${REDIS_CLIENT_TLS_KEYS_DIR}/<%= p('tls_ca_cert_file') %>";
REDIS_CRED+=" --cacert ${REDIS_CLIENT_TLS_CA_CERT_FILE}";
chown -R vcap:vcap "${REDIS_CLIENT_TLS_KEYS_DIR}";
chmod -R g-rwx,o-rwx "${REDIS_CLIENT_TLS_KEYS_DIR}";
<%- end -%>

#
# Look up Redis instances
#
PING="$("${REDIS_CLI}" \
  -h "${REDIS_IP}" \
  -p "${REDIS_PORT}" \
  ${REDIS_CRED} \
  PING)";
ERR=${?}
if [[ ${ERR} -eq 0 ]] && [[ "${PING}" == "PONG" ]];
then
  echo "Redis server at address [${REDIS_IP}] and port [${REDIS_PORT}] is available.";
fi

#
# Look up Redis Sentinel instances
#
<%- if master.p('replication') && !sentinel.nil?
  sentinel_addresses=''
  sentinel.instances.each{ |x| sentinel_addresses.concat(x.address).concat(' ') }
  if !sentinel_slave.nil?
    sentinel_slave.instances.each{ |x| sentinel_addresses.concat(x.address).concat(' ') }
  end -%>
REDIS_SENTINEL_ADDRESSES="<%= sentinel_addresses %>";
REDIS_SENTINEL_PORT="<%= sentinel.p('port') %>";
REDIS_SENTINEL_CRED="";
<%- sentinel.if_p('password') do |x|
    unless x.to_s.empty? -%>
REDIS_SENTINEL_CRED="-a <%= x %>";
<%- end
  end
  if sentinel.p('tls') -%>
REDIS_SENTINEL_PORT="<%= sentinel.p('tls_port') %>";
REDIS_SENTINEL_CRED+=" --tls --cert ${REDIS_CLIENT_TLS_CERT_FILE}";
REDIS_SENTINEL_CRED+=" --key ${REDIS_CLIENT_TLS_KEY_FILE}";
REDIS_SENTINEL_CRED+=" --cacert ${REDIS_CLIENT_TLS_CA_CERT_FILE}";
<%- end -%>

for x in ${REDIS_SENTINEL_ADDRESSES};
do
  PING="$("${REDIS_CLI}" \
    -h "${x}" \
    -p "${REDIS_SENTINEL_PORT}" \
    ${REDIS_SENTINEL_CRED} \
    PING)";
  ERR=${?}
  if [[ ${ERR} -eq 0 ]] && [[ "${PING}" == "PONG" ]];
  then
    echo "Redis Sentinel at address [${x}] and port [${REDIS_SENTINEL_PORT}] is available.";
    if [[ ${ERR} -eq 0 ]];
    then
      echo "Available master for Sentinel at ${x}:"
      "${REDIS_CLI}" \
        -h "${x}" \
        -p "${REDIS_SENTINEL_PORT}" \
        ${REDIS_SENTINEL_CRED} \
        SENTINEL master <%= spec.deployment %>;
      ERR=${?};
      if [[ ${ERR} -eq 0 ]];
      then
        echo "Available slaves for Sentinel at ${x}:"
        "${REDIS_CLI}" \
          -h "${x}" \
          -p "${REDIS_SENTINEL_PORT}" \
          ${REDIS_SENTINEL_CRED} \
          SENTINEL slaves <%= spec.deployment %>;
        ERR=${?};
      fi
      if [[ ${ERR} -eq 0 ]];
      then
        echo "Available Sentinels for Sentinel at ${x}:"
        "${REDIS_CLI}" \
          -h "${x}" \
          -p "${REDIS_SENTINEL_PORT}" \
          ${REDIS_SENTINEL_CRED} \
          SENTINEL sentinels <%= spec.deployment %>;
        ERR=${?};
      fi
    fi
  fi
done
<%- end -%>

#
# Look up Redis cluster
#
REDIS_CLI_CLUSTER_OPTS="";
<%- if master.p('cluster_enabled').eql?('yes') -%>
REDIS_CLI_CLUSTER_OPTS="-c";
<%- node_port=master.p('port')
  if master.p('tls') && master.p('tls_cluster')
    node_port=master.p('tls_port')
  end
  master_addresses=''
  master.instances.each{ |x| master_addresses.concat(x.address).concat(' ') }
  master_instances=master.instances.length
  replicas_per_node=master.p('cluster_replicas_per_node').to_i
  slaves_addresses=''
  slave_instances=0
  if !slave.nil?
    if replicas_per_node>0
      slave.instances.each{ |x| slaves_addresses.concat(x.address).concat(' ') }
      slave_instances=slave.instances.length
    else
      slave.instances.each{ |x| master_addresses.concat(x.address).concat(' ') }
      master_instances+=slave.instances.length
      replicas_per_node=0
    end
  elsif replicas_per_node>0
    if master_instances>replicas_per_node
      addresses=master_addresses.split
      master_instances=master_instances.div(replicas_per_node+1)
      master_addresses=addresses.slice(0..master_instances-1).join(' ')
      slaves_addresses=addresses.slice(master_instances..-1)
      slave_instances=slaves_addresses.length
      slaves_addresses=slaves_addresses.join(' ')
    else
      replicas_per_node=0
    end
  end -%>
REDIS_MASTER_ADDRESSES="<%= master_addresses %>";
REDIS_MASTER_INSTANCES="<%= master_instances %>";
REDIS_SLAVE_ADDRESSES="<%= slaves_addresses %>";
REDIS_SLAVE_INSTANCES="<%= slave_instances %>";
REDIS_ADDRESSES="${REDIS_MASTER_ADDRESSES} ${REDIS_SLAVE_ADDRESSES}";
REDIS_INSTANCES="<%= master_instances+slave_instances %>";
REPLICAS_PER_NODE="<%= replicas_per_node %>";
NODE_PORT="<%= node_port %>";

echo "Initial masters addresses: [${REDIS_MASTER_ADDRESSES}]";
echo "Number of masters: [${REDIS_MASTER_INSTANCES}]";
echo "Initial slaves addresses: [${REDIS_SLAVE_ADDRESSES}]";
echo "Number of slaves: [${REDIS_SLAVE_INSTANCES}]";
echo "Replicas per master: [${REPLICAS_PER_NODE}]";
echo "Nodes port: [${NODE_PORT}]";

MSG="$("${REDIS_CLI}" \
  -h "${REDIS_IP}" \
  -p "${REDIS_PORT}" \
  ${REDIS_CRED} \
  CLUSTER NODES)";
ERR=${?};
if [[ ${ERR} -eq 0 ]];
then
  echo "Redis CLUSTER NODES command results:";
  echo "${MSG}";
  AVAILABLE_NODES=0;
  for i in $(echo "${MSG}" | awk '{print $2;}');
  do
    for j in ${REDIS_ADDRESSES};
    do
      if [[ "${i%%@*}" == "${j}:${NODE_PORT}" ]];
      then
        ((AVAILABLE_NODES++));
      fi
    done
  done
  if [[ ${REDIS_INSTANCES} -eq ${AVAILABLE_NODES} ]];
  then
    echo "All requested Redis nodes [${REDIS_INSTANCES}] are available the cluster";
    AVAILABLE_NODES=$(echo "${MSG}" | awk '$3~/master/{print $2;}' | wl -l);
    if [[ ${REDIS_MASTER_INSTANCES} -eq ${AVAILABLE_NODES} ]];
    then
      echo "All requested Redis master nodes [${REDIS_MASTER_INSTANCES}] are available";
      ERR=0;
    else
      echo "WARNING: The requested Redis master nodes [${REDIS_MASTER_INSTANCES}] is not equal to the initial available master nodes [${AVAILABLE_NODES}]" >&2;
      ERR=1;
    fi
    AVAILABLE_NODES=$(echo "${MSG}" | awk '$3~/slave/{print $2;}' | wl -l);
    if [[ ${REDIS_SLAVE_INSTANCES} -eq ${AVAILABLE_NODES} ]];
    then
      echo "All requested Redis slave nodes [${REDIS_SLAVE_INSTANCES}] are available";
      ERR=0;
    else
      echo "WARNING: The requested Redis slave nodes [${REDIS_SLAVE_INSTANCES}] is not equal to the initial available slave nodes [${AVAILABLE_NODES}]" >&2;
      ERR=1;
    fi
  else
    echo "ERROR: The requested Redis nodes [${REDIS_INSTANCES}] is not equal to the available nodes [${AVAILABLE_NODES}]" >&2;
    ERR=1;
  fi
else
  echo "ERROR: Redis CLUSTER NODES command failed." >&2;
  ERR=1;
fi
<%- end -%>

#
# CRUD tests
#
if [[ ${ERR} -eq 0 ]];
then
  KV="<%= spec.deployment+'_'+spec.name+'_'+spec.address.to_s %>";
  RESULT="";
<%- if master.p('replication') && !sentinel.nil? -%>
  for x in ${REDIS_SENTINEL_ADDRESSES};
  do
    REDIS_MASTER="$("${REDIS_CLI}" \
      -h "${x}" \
      -p "${REDIS_SENTINEL_PORT}" \
      ${REDIS_SENTINEL_CRED} \
      SENTINEL get-master-addr-by-name <%= spec.deployment %>)";
    REDIS_IP="${REDIS_MASTER%%[[:space:]]*}";
    REDIS_PORT="${REDIS_MASTER#*[[:space:]]}";
<%- end -%>
    REDIS_CLI_OPTS="-h ${REDIS_IP} -p ${REDIS_PORT} ${REDIS_CRED} ${REDIS_CLI_CLUSTER_OPTS}";
    "${REDIS_CLI}" \
      ${REDIS_CLI_OPTS} \
      SET ${KV} ${KV};
    ERR=${?};
    if [[ ${ERR} -eq 0 ]];
    then
      echo "Create operation: succeed";
      RESULT="$("${REDIS_CLI}" \
        ${REDIS_CLI_OPTS} \
        GET ${KV})";
      ERR=${?};
      if [[ ${ERR} -eq 0 ]] && [[ "${KV}" == "${RESULT}" ]];
      then
        echo "Read operation: succeed";
        "${REDIS_CLI}" \
          ${REDIS_CLI_OPTS} \
          APPEND ${KV} ${KV};
        ERR=${?};
        if [[ ${ERR} -eq 0 ]];
        then
          echo "Append operation: succeed";
          RESULT="$("${REDIS_CLI}" \
            ${REDIS_CLI_OPTS} \
            GET ${KV})";
          ERR=${?};
          if [[ ${ERR} -eq 0 ]] && [[ "${KV}${KV}" == "${RESULT}" ]];
          then
            echo "Update operation: succeed";
          else
            echo "Update operation: failed";
          fi
        else
          echo "Append operation: failed";
        fi
      else
        echo "Read operation: failed";
      fi
      "${REDIS_CLI}" \
        ${REDIS_CLI_OPTS} \
        DEL ${KV};
      ERR=${?};
      if [[ ${ERR} -eq 0 ]];
      then
        echo "Delete operation: succeed";
      else
        echo "Delete operation: failed";
      fi
    else
      echo "Create operation: failed";
    fi
<%- if master.p('replication') && !sentinel.nil? -%>
  done
<%- end -%>
fi

exit ${ERR};
