#!/bin/bash
<%
  master=link('redis_conn')
  slave=nil
  if_link('slave_conn'){ |x| slave=x }
  sentinel=nil
  if_link('redis_sentinel_conn'){ |x| sentinel=x }
  sentinel_slave=nil
  if_link('sentinel_slave_conn'){ |x| sentinel_slave=x }
%>

ERR=0;
REDIS_HOME="/var/vcap/packages/redis";
REDIS_CLI="${REDIS_HOME}/bin/redis-cli";

#
# Bind to Sentinel
#
<% if master.p('replication') && master.instances.find{ |x| x.bootstrap }.address.eql?(spec.address) && !sentinel.nil?
    if sentinel.p('shared') %>
REDIS_SENTINEL_PORT="<%= sentinel.p('port') %>";
REDIS_SENTINEL_PASSWORD="";
<% sentinel.if_p('password') do |password|
    unless password.to_s.empty? %>
REDIS_SENTINEL_PASSWORD="-a <%= password %>";
<%  end
  end %>

REDIS_SENTINEL_CMD="";
printf -v REDIS_SENTINEL_CMD "SENTINEL MONITOR <%= spec.deployment %> <%= master.instances.find{ |x| x.bootstrap }.address %> <%= master.p('port') %> <%= master.p('max_detected_failures') %>\n";

<% master.if_p('password') do |password|
    unless password.to_s.empty? %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> AUTH-PASS <%= master.p('password') %>\n";
<%  end
  end %>

printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> DOWN-AFTER-MILLISECONDS <%= master.p('down_after_milliseconds') %>\n";

printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> PARALLEL-SYNCS <%= sentinel.p('parallel_syncs') %>\n";

printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> FAILOVER-TIMEOUT <%= master.p('failover_timeout') %>\n";

<% master.if_p('rename_config_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND CONFIG <%= command %>\n";
<% end %>

<% master.if_p('rename_save_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND SAVE <%= command %>\n";
<% end %>

<% master.if_p('rename_bgsave_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND BGSAVE <%= command %>\n";
<% end %>

<% master.if_p('rename_bgrewriteaof_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND BGREWRITEAOF <%= command %>\n";
<% end %>

<% master.if_p('rename_monitor_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND MONITOR <%= command %>\n";
<% end %>

<% master.if_p('rename_debug_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND DEBUG <%= command %>\n";
<% end %>

<% master.if_p('rename_shutdown_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND SHUTDOWN <%= command %>\n";
<% end %>

<% master.if_p('rename_slaveof_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND SLAVEOF <%= command %>\n";
<% end %>

<% master.if_p('rename_replicaof_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND REPLICAOF <%= command %>\n";
<% end %>

<% master.if_p('rename_sync_command') do |command| %>
printf -v REDIS_SENTINEL_CMD "SENTINEL SET <%= spec.deployment %> RENAME-COMMAND SYNC <%= command %>\n";
<% end %>

REDIS_SENTINEL_ADDRESS="";
<%
  sentinel_addresses=''
  sentinel.instances.each{ |x| sentinel_addresses.concat(x.address).concat(' ') }
  if !sentinel_slave.nil?
    sentinel_slave.instances.each{ |x| sentinel_addresses.concat(x.address).concat(' ') }
  end
%>
REDIS_SENTINEL_ADDRESSES="<%= sentinel_addresses %>";
REDIS_SENTINEL_DONE="";
for x in ${REDIS_SENTINEL_ADDRESSES};
do
  MSG="$(printf "%s\n" | ${REDIS_CLI} ${REDIS_SENTINEL_PASSWORD} \
    -h ${x} -p ${REDIS_SENTINEL_PORT})";
  if [[ ! ${?} -eq 0 ]];
  then
    ERR=1;
    printf "%s\n" "ERROR: Commands failed with Sentinel \"${x}\": \"${MSG}\".";
    break;
  fi
  REDIS_SENTINEL_DONE+="${x} ";
done

if [[Â ${ERR} -eq 1 ]];
then
  for x in ${REDIS_SENTINEL_DONE};
  do
    ${REDIS_CLI} ${REDIS_SENTINEL_PASSWORD} \
    -h ${x} -p ${REDIS_SENTINEL_PORT})" SENTINEL REMOVE <%= spec.deployment %>;
  done
fi

<%  end
  end %>

#
# Build Redis cluster
#
<% if master.p('cluster_enabled').eql?('yes') && master.instances.find{ |x| x.bootstrap }.address.eql?(spec.address) %>

REDIS_IP="127.0.0.1";
<% if master.p('bind') %>
REDIS_IP="<%= spec.ip %>";
<% end %>
REDIS_PORT="<%= master.p('port') %>";

REDIS_PASSWORD="";
<% master.if_p('password') do |password|
    unless password.to_s.empty? %>
REDIS_PASSWORD="-a <%= password %>";
<%  end
  end %>

<%
  addresses=''
  master.instances.each{ |x| addresses.concat(x.address).concat(' ') }
  instances=master.instances.length
%>
REDIS_MASTER_ADDRESSES="<%= addresses %>";
REDIS_MASTER_INSTANCES="<%= instances %>";
<%
  slaves_addresses=''
  slave_instances=0
  if !slave.nil?
    slave.instances.each{ |x| slaves_addresses.concat(x.address).concat(' ') }
    slave_instances=slave.instances.length
  end
  addresses.concat(slaves_addresses)
  instances+=slave_instances
%>
REDIS_SLAVE_ADDRESSES="<%= slaves_addresses %>";
REDIS_SLAVE_INSTANCES="<%= slave_instances %>";
REDIS_ADDRESSES="<%= addresses %>";
REDIS_INSTANCES="<%= instances %>";

REDIS_SLAVE_PER_INSTANCE="";
SLAVE_PER_INSTANCE="<%= master.p('cluster_replicas_per_node') %>";
if [[ ${SLAVE_PER_INSTANCE} -gt 0 ]];
then
  REDIS_SLAVE_PER_INSTANCE="--cluster-replicas ${SLAVE_PER_INSTANCE}";
else
  SLAVE_PER_INSTANCE=0;
fi

REDIS_MASTER_NODES="";
for i in ${REDIS_MASTER_ADDRESSES};
do
  REDIS_MASTER_NODES+=" ${i}:${REDIS_PORT}";
done

REDIS_SLAVE_NODES="";
for i in ${REDIS_SLAVE_ADDRESSES};
do
  REDIS_SLAVE_NODES+=" ${i}:${REDIS_PORT}";
done

REDIS_CLUSTER_NODES_COMMAND="$(${REDIS_CLI} ${REDIS_PASSWORD} \
  -h ${REDIS_IP} -p ${REDIS_PORT} CLUSTER NODES)";
ERR=${?};
if [[ ${ERR} -eq 0 ]];
then
  echo "Redis CLUSTER NODES command results:";
  echo "${REDIS_CLUSTER_NODES_COMMAND}";
  AVAILABLE_NODES=0;
  for i in $(echo "${REDIS_CLUSTER_NODES_COMMAND}" | awk '{print $2;}');
  do
    for j in ${REDIS_ADDRESSES};
    do
      if [[ "${i%%@*}" == "${j}:${REDIS_PORT}" ]];
      then
        ((AVAILABLE_NODES++));
      fi
    done
  done
  if [[ ${REDIS_INSTANCES} -eq ${AVAILABLE_NODES} ]];
  then
    echo "All requested nodes are already in a cluster.";
    exit 0;
  fi
fi

AVAILABLE_NODES=0;
while [[ ${REDIS_INSTANCES} -gt ${AVAILABLE_NODES} ]];
do
  AVAILABLE_NODES=0;
  for i in ${REDIS_ADDRESSES};
  do
    PING="$(${REDIS_CLI} -h ${i} -p ${REDIS_PORT} ${REDIS_PASSWORD} PING)";
    if [[ ${?} -eq 0 ]] && [[ "${PING}" == "PONG" ]];
    then
      ((AVAILABLE_NODES++));
    fi
  done
done

if [[ ${REDIS_INSTANCES} -eq ${AVAILABLE_NODES} ]];
then
<% if !slave.nil? %>
  if [[ $(( ${REDIS_MASTER_INSTANCES}%(${SLAVE_PER_INSTANCE}+1) )) -ne 0 ]];
  then
    echo "WARNING: Not enough slave: master [${REDIS_MASTER_INSTANCES}], slave per master [${SLAVE_PER_INSTANCE}]" >&2;
  fi
  ${REDIS_CLI} \
    ${REDIS_PASSWORD} \
    --cluster create ${REDIS_MASTER_NODES} ${REDIS_SLAVE_NODES} \
    ${REDIS_SLAVE_PER_INSTANCE} <<< "yes";
  ERR=${?};
<% else %>
  if [[ ${REDIS_SLAVE_INSTANCES} -lt ${REDIS_MASTER_INSTANCES}*${SLAVE_PER_INSTANCE} ]];
  then
    echo "WARNING: Not enough slave: master [${REDIS_MASTER_INSTANCES}], slave [${REDIS_SLAVE_INSTANCES}], slave per master [${SLAVE_PER_INSTANCE}]" >&2;
  fi
  REDIS_NODES="${REDIS_MASTER_NODES}";
  if [[ ${SLAVE_PER_INSTANCE} -eq 0 ]];
  then
    REDIS_NODES="${REDIS_MASTER_NODES} ${REDIS_SLAVE_NODES}";
  fi
  ${REDIS_CLI} \
    ${REDIS_PASSWORD} \
    --cluster create ${REDIS_NODES} <<< "yes";
  ERR=${?};
  if [[ ${ERR} -eq 0 ]] && [[ ${SLAVE_PER_INSTANCE} -gt 0 ]];
  then
    for i in ${REDIS_MASTER_ADDRESSES};
    do
      MASTER_ID="$(${REDIS_CLI} \
        ${REDIS_PASSWORD} \
        -h ${i} -p ${REDIS_PORT} \
        CLUSTER MYID)";
      ERR=${?};
      j=0;
      while [[ ${ERR} -eq 0 ]] && \
        [[ -n "${REDIS_SLAVE_ADDRESSES}" ]] && \
        [[ ${j} -lt ${SLAVE_PER_INSTANCE} ]];
      do
        ${REDIS_CLI} \
          ${REDIS_PASSWORD} \
          --cluster add-node ${REDIS_SLAVE_ADDRESSES%% *}:${REDIS_PORT} \
          ${i}:${REDIS_PORT} \
          --cluster-slave \
          --cluster-master-id ${MASTER_ID} <<< "yes";
        ERR=${?};
        REDIS_SLAVE_ADDRESSES="${REDIS_SLAVE_ADDRESSES#* }";
        ((j++));
      done
    done

    while [[ ${ERR} -eq 0 ]] && \
      [[ -n "${REDIS_SLAVE_ADDRESSES}" ]];
    do
      for i in ${REDIS_MASTER_ADDRESSES};
      do
        MASTER_ID="$(${REDIS_CLI} \
          ${REDIS_PASSWORD} \
          -h ${i} -p ${REDIS_PORT} \
          CLUSTER MYID)";
        ERR=${?};
        ${REDIS_CLI} \
          ${REDIS_PASSWORD} \
          --cluster add-node ${REDIS_SLAVE_ADDRESSES%% *}:${REDIS_PORT} \
          ${i}:${REDIS_PORT} \
          --cluster-slave \
          --cluster-master-id ${MASTER_ID} <<< "yes";
        ERR=${?};
        REDIS_SLAVE_ADDRESSES="${REDIS_SLAVE_ADDRESSES#* }";
        if [[ -z "${REDIS_SLAVE_ADDRESSES}" ]];
        then
          break;
        fi
      done
    done
  fi
<% end %>
  REDIS_CLUSTER_NODES_COMMAND="$(${REDIS_CLI} ${REDIS_PASSWORD} \
    -h ${REDIS_IP} -p ${REDIS_PORT} CLUSTER NODES)";
  ERR=${?};
  if [[ ${ERR} -eq 0 ]];
  then
    echo "Redis CLUSTER NODES command results:";
    echo "${REDIS_CLUSTER_NODES_COMMAND}";
  fi
fi

<% end %>

exit ${ERR};
